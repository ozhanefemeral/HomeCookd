datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DeliveryDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum MealTags {
  VEGETARIAN
  GLUTEN_FREE
  DAIRY_FREE
  TRENDING
  NEW
  BIG_PORTION
  HIGH_PROTEIN
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password      String
  subscriptions Subscription[]

  profile       UserProfile?
}

model UserProfile {
  id        String     @id @default(cuid())
  name      String
  interests MealTags[]
  dislikes  MealTags[]
  User      User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String    @unique
  onboardingCompleted Boolean @default(false)
}

model Cook {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String
  username String @unique

  recipes Recipe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meals Meal[]

  profile CookProfile?
}

model CookProfile {
  id String @id @default(cuid())

  instagram   String
  facebook    String
  youtube     String
  banner      String
  avatar      String
  description String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cook Cook @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  username String @unique
}

model Meal {
  id    String @id @default(cuid())
  title String
  price Int
  image String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cook     Cook   @relation(fields: [cookedBy], references: [username], onDelete: Cascade, onUpdate: Cascade)
  cookedBy String

  tags MealTags[]

  subscriptionMeals SubscriptionMeal[]
}

model Subscription {
  id    String   @id @default(cuid())
  title String
  price Int
  start DateTime @default(now())
  end   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  subscriptionMeals SubscriptionMeal[]
}

model SubscriptionMeal {
  id       String @id @default(cuid())
  price    Int
  quantity Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deliveryDay  DeliveryDay
  deliveryHour String

  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscriptionId String

  meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealId String
}

model Recipe {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cook     Cook   @relation(fields: [username], references: [username], onDelete: Cascade, onUpdate: Cascade)
  username String
}
